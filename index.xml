<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fake website</title><link>https://Greletudiant.github.io/</link><description>Recent content on fake website</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://Greletudiant.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Command Line &amp; Documentation</title><link>https://Greletudiant.github.io/docs/command-line-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Greletudiant.github.io/docs/command-line-documentation/</guid><description>&lt;h1 id="matrix-multiplication-project-report">Matrix Multiplication Project Report&lt;/h1>
&lt;p>&lt;strong>Student Name&lt;/strong>: Li Shangyuan&lt;br>
&lt;strong>Student ID&lt;/strong>: ZY2457216
&lt;strong>Submission Date&lt;/strong>: 2025-03-26&lt;/p>
&lt;h2 id="system-configuration">System Configuration&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;strong>Component&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Details&lt;/strong>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>CPU Model&lt;/td>
 &lt;td>Apple M3&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Memory Size&lt;/td>
 &lt;td>16 GB&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Operating System Version&lt;/td>
 &lt;td>macOS 15.3.2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Compiler Version&lt;/td>
 &lt;td>Apple clang version 16.0.0 (clang-1600.0.26.6)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Python Version&lt;/td>
 &lt;td>Python 3.12.8&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="implementation-details">Implementation Details&lt;/h2>
&lt;h3 id="c-language-implementation">C Language Implementation&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Source Code&lt;/strong>(&lt;code>matrix.c&lt;/code>):&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;time.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Define the dimensions of the matrices
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#define ROW1 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define COL1 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define ROW2 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define COL2 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Function to perform matrix multiplication
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">matrix_multiply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">mat1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ROW1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">COL1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">mat2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ROW2&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">COL2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ROW1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">COL2&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Iterate through rows of the first matrix
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">ROW1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Iterate through columns of the second matrix
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">COL2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Initialize the result element to 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Iterate through columns of the first matrix (or rows of the second matrix)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">COL1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Multiply corresponding elements and add to the result
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">mat1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">mat2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Define the first matrix
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">mat1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ROW1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">COL1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">}};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Define the second matrix
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">mat2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ROW2&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">COL2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">}};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Initialize the result matrix
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ROW1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">COL2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Record the start time
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">clock_t&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">clock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Perform matrix multiplication
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">matrix_multiply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mat1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mat2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Record the end time
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">clock_t&lt;/span> &lt;span class="n">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">clock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Calculate the time taken
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">time_taken&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">end&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">CLOCKS_PER_SEC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Print the execution time of matrix multiplication in C
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;C language matrix multiplication execution time: %f seconds&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">time_taken&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Print the result matrix
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Result matrix:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">ROW1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">COL2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>Compilation Command‌e&lt;/strong>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gcc -o matrix_c matrix.c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>Execution Command&lt;/strong>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">./matrix_c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>result:&lt;/p></description></item><item><title>Get your adission</title><link>https://Greletudiant.github.io/admission/get-your-admission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Greletudiant.github.io/admission/get-your-admission/</guid><description>&lt;p>To make it more familiar with the course, we have prepared a certificate for you. This certificate is not only a proof of your admission but also a souvenir for your study in the course.&lt;/p>
&lt;p>Congratulations on being admitted to the &amp;ldquo;Fundamentals of Software Technology&amp;rdquo; course! Please fill in the following information:&lt;/p>
&lt;div class="cert-form">
 &lt;input type="text" id="studentName" placeholder="请输入姓名 Enter your name">
 &lt;input type="text" id="studentID" placeholder="请输入学号 Enter your student ID">
 &lt;button onclick="generateCertificate()">生成证书 Download Certificate&lt;/button>
&lt;/div>
&lt;style>
.cert-form {
 display: flex;
 flex-direction: column;
 gap: 1rem;
 max-width: 400px;
 margin: 2rem auto;
 padding: 1.5rem;
 border-radius: 8px;
 box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

input {
 padding: 0.8rem;
 border: 1px solid #ddd;
 border-radius: 4px;
}

button {
 background:rgb(54, 58, 61);
 color: white;
 padding: 1rem;
 border: none;
 border-radius: 4px;
 cursor: pointer;
}
&lt;/style>
&lt;script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js">&lt;/script>
&lt;script>
function generateCertificate() {
 // 获取用户输入
 const name = document.getElementById('studentName').value.trim();
 const id = document.getElementById('studentID').value.trim();
 
 // 输入验证
 if (!name || !id) {
 alert('Please fill in all fields');
 return;
 }

 try {
 // 初始化PDF文档
 const doc = new jspdf.jsPDF({
 orientation: 'landscape',
 unit: 'mm',
 format: 'a4'
 });

 // 设置背景
 doc.setFillColor(245, 245, 245);
 doc.rect(0, 0, 297, 210, 'F');

 // 添加主标题
 doc.setFontSize(24);
 doc.setTextColor(33, 150, 243);
 doc.text('ADMISSION LETTER', 105, 50, null, null, 'center');

 // 添加正文内容
 doc.setFontSize(16);
 doc.setTextColor(0);
 const contentLines = [
 `This is to certify that ${name} (Student ID: ${id})`,
 'has been officially admitted to the course of Fundamentals of Software Technology',
 'starting from February 2025.'
 ];
 contentLines.forEach((line, index) => doc.text(line, 50, 70 + (index * 15)));

 // ========== 签名区域调整 ==========
 const signatureBaseY = 140; // A4纸下1/3处起始位置
 
 // 教师签名文字
 doc.setFontSize(14);
 doc.text("Instructor's Signature: ", 50, signatureBaseY);
 
 
 
 // 日期
 doc.text(`Date: ${new Date().toLocaleDateString('en-US')}`, 50, signatureBaseY + 35);


 

 // 保存PDF
 doc.save(`Admission-Letter-${name}.pdf`);

 } catch (error) {
 console.error('Certificate generation failed:', error);
 alert('Error generating certificate. Please try again.');
 }
}
&lt;/script></description></item><item><title>Get your diploma</title><link>https://Greletudiant.github.io/diploma/get-your-diploma/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Greletudiant.github.io/diploma/get-your-diploma/</guid><description>&lt;p>恭喜您已完成《软件技术基础》课程！请填写以下信息获取电子版结课证书：&lt;/p>
&lt;p>Congratulations on completing the &amp;ldquo;Fundamentals of Software Technology&amp;rdquo; course! Please fill in the following information to download your digital certificate:&lt;/p>
&lt;div class="cert-form">
 &lt;input type="text" id="studentName" placeholder="请输入姓名 Enter your name">
 &lt;input type="text" id="studentID" placeholder="请输入学号 Enter your student ID">
 &lt;button onclick="generateCertificate()">生成证书 Download Certificate&lt;/button>
&lt;/div>
&lt;style>
.cert-form {
 display: flex;
 flex-direction: column;
 gap: 1rem;
 max-width: 400px;
 margin: 2rem auto;
 padding: 1.5rem;
 border-radius: 8px;
 box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

input {
 padding: 0.8rem;
 border: 1px solid #ddd;
 border-radius: 4px;
}

button {
 background:rgb(54, 58, 61);
 color: white;
 padding: 1rem;
 border: none;
 border-radius: 4px;
 cursor: pointer;
}
&lt;/style>
&lt;script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js">&lt;/script>
&lt;script>
function generateCertificate() {
 const name = document.getElementById('studentName').value;
 const id = document.getElementById('studentID').value;
 
 if (!name || !id) {
 alert('请填写完整信息 Please fill in all fields');
 return;
 }

 // 创建PDF证书
 const doc = new jspdf.jsPDF({
 orientation: 'landscape',
 unit: 'mm',
 format: 'a4'
 });

 // 证书背景
 doc.setFillColor(245, 245, 245);
 doc.rect(0, 0, 297, 210, 'F');

 // 证书内容
 doc.setFontSize(24);
 doc.setTextColor(33, 150, 243);
 doc.text('Certificate of Completion', 105, 50, null, null, 'center');
 doc.setFontSize(16);
 doc.setTextColor(0);
 

 doc.text(`This is to certify that ${name} (Student ID: ${id})`, 50, 80);
 
 doc.text('You are not qualified to have a diploma, keep working!', 50, 95);

 // 新增保存操作（核心修改）
 doc.save(`certification-Letter-${name}.pdf`); // 添加这行触发下载
}
&lt;/script>
 &lt;!-- doc.text('has successfully completed the course of study in', 50, 95);
 doc.text('Fundamentals of Software Technology', 50, 110);
 doc.text('Awarded this certificate in recognition of academic achievement.', 50, 130); --></description></item><item><title>Overview</title><link>https://Greletudiant.github.io/docs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Greletudiant.github.io/docs/overview/</guid><description>&lt;p>There should be a brief overview of the course here. But I don&amp;rsquo;t know what to write. So I just put a placeholder here.&lt;/p></description></item><item><title>Static Personal Blog Website</title><link>https://Greletudiant.github.io/docs/static-personal-blog-website/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Greletudiant.github.io/docs/static-personal-blog-website/</guid><description>&lt;h1 id="1-install-hugo">1 Install Hugo&lt;/h1>
&lt;p>Hugo is a static site generator that can convert Markdown files into HTML files. Before installing Hugo, we need to install Git, Go, and Dart Sass.&lt;/p>
&lt;h2 id="git">Git:&lt;/h2>
&lt;ul>
&lt;li>Build Hugo from source&lt;/li>
&lt;li>Use Hugo module functionality&lt;/li>
&lt;li>Install themes as Git submodules&lt;/li>
&lt;li>Access commit information from a local Git repository&lt;/li>
&lt;li>Host your site using services like CloudCannon, CloudFlare Pages, GitHub Pages, GitLab Pages, and Netlify.&lt;/li>
&lt;/ul>
&lt;p>Download links:&lt;/p>
&lt;p>&lt;a href="https://git-scm.com/download/mac">Mac Download&lt;/a>&lt;/p></description></item></channel></rss>